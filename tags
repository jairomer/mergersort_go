!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/neusynk/Workspace/repos/mergesort_go/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
BenchmarkGoSort	mergesort_test.go	/^func BenchmarkGoSort(b *testing.B) {$/;"	f	package:mergesort
BenchmarkSort	mergesort_test.go	/^func BenchmarkSort(b *testing.B) {$/;"	f	package:mergesort
GoSort	mergesort.go	/^func GoSort(in []int) []int {$/;"	f	package:mergesort	typeref:typename:[]int
How?	README.md	/^## How?$/;"	s	chapter:mergersort_go
Sort	mergesort.go	/^func Sort(in []int) []int {$/;"	f	package:mergesort	typeref:typename:[]int
TestGoSort1	mergesort_test.go	/^func TestGoSort1(t *testing.T) {$/;"	f	package:mergesort
TestGoSort2	mergesort_test.go	/^func TestGoSort2(t *testing.T) {$/;"	f	package:mergesort
TestGoSort3	mergesort_test.go	/^func TestGoSort3(t *testing.T) {$/;"	f	package:mergesort
TestGoSort4	mergesort_test.go	/^func TestGoSort4(t *testing.T) {$/;"	f	package:mergesort
TestSort1	mergesort_test.go	/^func TestSort1(t *testing.T) {$/;"	f	package:mergesort
TestSort2	mergesort_test.go	/^func TestSort2(t *testing.T) {$/;"	f	package:mergesort
TestSort3	mergesort_test.go	/^func TestSort3(t *testing.T) {$/;"	f	package:mergesort
TestSort4	mergesort_test.go	/^func TestSort4(t *testing.T) {$/;"	f	package:mergesort
TesttoStr	mergesort_test.go	/^func TesttoStr(t *testing.T) {$/;"	f	package:mergesort
What is this?	README.md	/^## What is this?$/;"	s	chapter:mergersort_go
Why?	README.md	/^## Why?$/;"	s	chapter:mergersort_go
concurrentMerge	mergesort.go	/^func concurrentMerge(arr []int, left int, middle int, right int) []int{$/;"	f	package:mergesort	typeref:typename:[]int
concurrentMergeSort	mergesort.go	/^func concurrentMergeSort(arrr []int, l int, r int) []int {$/;"	f	package:mergesort	typeref:typename:[]int
merge	mergesort.go	/^func merge(arr []int, left int, middle int, right int) {$/;"	f	package:mergesort
mergeSort	mergesort.go	/^func mergeSort(arr []int, l int, r int) {$/;"	f	package:mergesort
mergersort_go	README.md	/^# mergersort_go$/;"	c
mergesort	mergesort.go	/^package mergesort$/;"	p
mergesort	mergesort_test.go	/^package mergesort$/;"	p
mu	mergesort.go	/^var mu sync.Mutex$/;"	v	package:mergesort	typeref:typename:sync.Mutex
toStr	mergesort_test.go	/^func toStr(in []int) string {$/;"	f	package:mergesort	typeref:typename:string
